<?xml version="1.0"?>

<PropertyList include="Harrier-GR3-bombableinclude.xml">

    <!-- Models -->

    <path>Harrier-GR3.ac</path>

    <offsets>
        <x-m>19.0</x-m>
        <y-m>0</y-m>
        <z-m>5.95</z-m>
        <pitch-deg>0.0</pitch-deg>
    </offsets>

    <!-- Cockpit -->

    <model>
        <usage>interior</usage>
        <path>Aircraft/Harrier-GR3/Models/Cockpit/Cockpit.xml</path>
    </model>

    <!-- Pilot -->

    <model>
        <object-name>Pilot</object-name>
        <path>Aircraft/Harrier-GR3/Models/Pilot/Pilot.xml</path>
        <offsets>
            <x-m>-15.15</x-m>
            <y-m>  0.0</y-m>
            <z-m> -5.9</z-m>
            <pitch-deg>0.0</pitch-deg>
        </offsets>
        <condition>
            <not>
                <property>/sim/current-view/internal</property>
            </not>
        </condition>
    </model>

    <!-- Lights -->

    <model>
        <path>Aircraft/Harrier-GR3/Models/Lights/LightPack.xml</path>
    </model>

    <nasal>
      <load><![CDATA[
  var root = cmdarg();
  var rootindex = root.getIndex();
  var mpPath = "/ai/models/multiplayer["~ rootindex ~"]/";

  var lightsPath = mpPath~"lightpack/"; #path to the property node, where all internal values are placed

  props.globals.initNode(mpPath~"sim/is-MP-Aircraft", 1, "BOOL");

  srand();
  #wherever you want to add randomization of time, use something like:  + rand()*0.05-0.025 (included by default where appropriate)


  #list of switches for lights - if you don't intend to use some light, assign it nil value instead, like whateverSwitch = nil; and you don't need to care about anything else
  #IMPORTANT: don't put / on the start of the string, it's already included in the mpPath property
  var navSwitch = mpPath~"controls/lighting/nav-lights-switch";
  var beaconSwitch = mpPath~"controls/lighting/beacon-switch";
  var strobeSwitch = mpPath~"controls/lighting/strobe-switch";
  var landingSwitch = mpPath~"controls/lighting/landing-lights-switch";
  var taxiSwitch = mpPath~"controls/lighting/taxi-light-switch";
  var probeSwitch = mpPath~"controls/lighting/probe-light-switch";
  var whiteSwitch = mpPath~"controls/lighting/white-light-switch";

  #switch this from 1 to 0 if you want to use advanced cyclical fading animation of the the nav lights instead of being stable on when the switch is on
  navStillOn = 1;


  #I need to set listener on some MP transferred properties; this doesn't seem to work well sometimes, so I mirror them to the original location on any change
  #This also simplifies work as I can use almost the same code for MP as is the local Nasal. Furthermore, I can use meaningful property names in the model XML files instead of referencing the MP properties.
  var mpVar = {
  	new: func(propIn, propOut) {
  		var m = { parents: [mpVar] };
  		m.propIn = propIn;
  		m.propOut = propOut;
  		if(propIn==nil) return m;
  		m.value = getprop(propIn);
  		setprop(propOut, m.value);
  		return m;
  	},
  	check: func {
  		if(me.propIn==nil) return;
  		var newValue = getprop(me.propIn);
  		if(newValue != me.value) {
  			setprop(me.propOut, newValue);
  			me.value = newValue;
  			#print("value of "~me.propOut~" changed: "~newValue);
  		}
  	},
  };
  #init any property copy object needed in this array (anything you need to transfer over MP, but you are using the original paths in your xmls)
  #also used for properties you are using a listener on, or properties which you maybe want to manipulate during the <unload>
  #if you're just using the pack, change the values according to the MP bindings in the -set.xml file
  #you don't need to delete the entries if the path is nil - it gets skipped automatically and the MP path is just ignored
  var mirrorValues = [
  	mpVar.new(mpPath~"sim/multiplay/generic/int[7]", mpPath~"sim/crashed"),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[0]", navSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[1]", beaconSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[1]", strobeSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[2]", landingSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[3]", taxiSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[3]", probeSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[0]", whiteSwitch),
  ];
  #loop at the default MP transfer frequency (10Hz)
  var mirrorTimer = maketimer(0.1, func {
  	foreach(var mir; mirrorValues) {
  		mir.check();
  	}
  });
  mirrorTimer.start();



  #### NAV LIGHTS ####

  #class for a periodic fade in/out animation - for flashing, use rather standard aircraft.light.new(), as in Beacon and Strobe section
  var lightCycle = {
  	#constructor
  	new: func(propSwitch, propOut) {
  		m = { parents: [lightCycle] };
  		props.globals.initNode(propOut, 0, "DOUBLE");
  		props.globals.initNode(propSwitch, 1, "BOOL");
  		m.fadeIn = 0.4 + rand()*0.05-0.025; #fade in time
  		m.fadeOut = 0.4 + rand()*0.05-0.025; #fade out time
  		m.stayOn = 1.5 + rand()*0.05-0.025; #stable on period
  		m.stayOff = 1 + rand()*0.05-0.025; #stable off period
  		m.turnOff = 0.12; #fade out time when turned off
  		m.phase = 0; #phase to be run on next timer call: 0 -> fade in, 1 -> stay on, 2 -> fade out, 3 -> stay off
  		m.cycleTimer = maketimer(0.1, func {
  			if(getprop(propSwitch)) {
  				if(m.phase == 0) {
  					interpolate(propOut, 1, m.fadeIn);
  					m.phase = 1;
  					m.cycleTimer.restart(m.fadeIn);
  				}
  				else if(m.phase == 1){
  					m.phase = 2;
  					m.cycleTimer.restart(m.stayOn);
  				}
  				else if(m.phase == 2){
  					interpolate(propOut, 0, m.fadeOut);
  					m.phase = 3;
  					m.cycleTimer.restart(m.fadeOut);
  				}
  				else if(m.phase == 3){
  					m.phase = 0;
  					m.cycleTimer.restart(m.stayOff);
  				}
  			}
  			else {
  				interpolate(propOut, 0, m.turnOff); #kills any currently ongoing interpolation
  				m.phase = 0;
  			}
  		});
  		m.cycleTimer.singleShot = 1;
  		if(propSwitch==nil) {
  			m.listen = nil;
  			return m;
  		}
  		m.listen = setlistener(propSwitch, func{m.cycleTimer.restart(0);}); #handle switch changes
  		m.cycleTimer.restart(0); #start the looping
  		return m;
  	},
  	#destructor
  	del: func {
  		if(me.listen!=nil) removelistener(me.listen);
  		me.cycleTimer.stop();
  	},
  };

  #By default, the switch property is initialized to 1 (only if no value is already assigned). Don't change the class implementation! To override this, set the property manually. You don't need to care if any other code already does it for you.
  var navLights = nil;
  if(!navStillOn) {
  	navLights = lightCycle.new(navSwitch, lightsPath~"nav-lights-intensity");
  	### Uncomment and tune those to customize times ###
  	#navLights.fadeIn = 0.4; #fade in time
  	#navLights.fadeOut = 0.4; #fade out time
  	#navLights.stayOn = 3 + rand()*0.05-0.025; #stable on period
  	#navLights.stayOff = 0.6; #stable off period
  	#navLights.turnOff = 0.12; #fade out time when turned off
  }


  ### BEACON ###
  var beacon = nil;
  if(beaconSwitch!=nil) {
  	props.globals.initNode(beaconSwitch, 1, "BOOL");
  	beacon = aircraft.light.new(lightsPath~"beacon-state",
  		[0.0, 1.0 + rand()*0.05-0.025], beaconSwitch);
  }


  ### STROBE ###
  var strobe = nil;
  if(strobeSwitch!=nil) {
  	props.globals.initNode(strobeSwitch, 1, "BOOL");
  	strobe = aircraft.light.new(lightsPath~"strobe-state",
  		[0.0, 0.87 + rand()*0.05-0.025], strobeSwitch);
  }


  ### LIGHT FADING ###

  #class for controlling fade in/out behavior - propIn is a control property (handled as a boolean) and propOut is interpolated
  #all light brightness animations in xmls depend on propOut (Rembrandt brightness, material emission, flares transparency, ...)
  var lightFadeInOut = {
  	#constructor
  	new: func(propSwitch, propOut) {
  		m = { parents: [lightFadeInOut] };
  		m.fadeIn = 0.3; #some sane defaults
  		m.fadeOut = 0.4;
  		if(propSwitch==nil) {
  			m.listen = nil;
  			return m;
  		}
  		props.globals.initNode(propSwitch, 1, "BOOL");
  		m.isOn = getprop(propSwitch);
  		props.globals.initNode(propOut, m.isOn, "DOUBLE");
  		m.listen = setlistener(propSwitch,
  			func {
  				if(m.isOn and !getprop(propSwitch)) {
  					interpolate(propOut, 0, m.fadeOut);
  					m.isOn = 0;
  				}
  				if(!m.isOn and getprop(propSwitch)) {
  					interpolate(propOut, 1, m.fadeIn);
  					m.isOn = 1;
  				}
  			}
  		);
  		return m;
  	},
  	#destructor
  	del: func {
  		if(me.listen!=nil) removelistener(me.listen);
  	},
  };

  fadeLanding = lightFadeInOut.new(landingSwitch, lightsPath~"landing-lights-intensity");
  fadeTaxi = lightFadeInOut.new(taxiSwitch, lightsPath~"taxi-light-intensity");
  fadeProbe = lightFadeInOut.new(probeSwitch, lightsPath~"probe-light-intensity");
  fadeWhite = lightFadeInOut.new(whiteSwitch, lightsPath~"white-light-intensity");
  if(navStillOn) {
  	navLights = lightFadeInOut.new(navSwitch, lightsPath~"nav-lights-intensity");
  	navLights.fadeIn = 0.1;
  	navLights.fadeOut = 0.12;
  }
  #manipulate times if defaults don't fit your needs:
  #fadeLanding.fadeIn = 0.5;
  #fadeLanding.fadeOut = 0.8;


  ### the rest of your model load embedded Nasal code ###

      ]]>
      </load>
      <unload>
        stopFire();
        disintegrated = 0;
        removelistener(listenCrash);

        #prevent multiple timers and listeners from running and fighting on next connect
        #cleanly destroy MP property mirroring
        mirrorTimer.stop();
        mirrorTimer = nil;
        mirrorValues = nil;

        #cleanly destroy nav lights
        if(navStillOn) {
        	navLights.del();
        }
        else {
        	if(navSwitch!=nil) setprop(navSwitch, 0);
        	navLights.del();
        	if(navSwitch!=nil) navLights.cycleTimer = nil;
        	navLights = nil;
        }

        #cleanly destroy beacon
        if(beaconSwitch!=nil) setprop(beaconSwitch, 0);
        beacon.del();
        beacon = nil;

        #cleanly destroy strobe
        if(strobeSwitch!=nil) setprop(strobeSwitch, 0);
        strobe.del();
        strobe = nil;

        #cleanly destroy light fade in/out animation objects
        fadeLanding.del();
        fadeTaxi.del();
        fadeProbe.del();
        fadeWhite.del();

        ### the rest of your model unload embedded Nasal code ###
      </unload>
    </nasal>

    <!-- Effects -->
    <model>
        <path>Aircraft/Harrier-GR3/Models/Effects.xml</path>
    </model>

    <!-- MP sound -->
    <sound>
        <path>Aircraft/Harrier-GR3/Sounds/MP-Sound.xml</path>
    </sound>

    <!-- Glass -->

    <effect>
        <inherits-from>Effects/model-transparent</inherits-from>
        <condition>
            <greater-than>
                <property>sim/multiplay/generic/float[6]</property>
                <value>9</value>
            </greater-than>
            <property>/sim/rendering/rembrandt/enabled</property>
        	</condition>
            <object-name>CanopyGlass</object-name>
            <object-name>CanopyGlassFront</object-name>
            <object-name>LandingLightGlass</object-name>
            <object-name>SensorGlass</object-name>
            <object-name>HUDGlass</object-name>
    </effect>

    <effect>
        <inherits-from>Effects/model-transparent</inherits-from>
            <object-name>CanopyGlass</object-name>
            <object-name>CanopyGlassFront</object-name>
            <object-name>HUDGlass</object-name>
            <object-name>LandingLightGlass</object-name>
            <object-name>SensorGlass</object-name>
    </effect>

    <animation>
        <type>noshadow</type>
        <object-name>CanopyGlass</object-name>
        <object-name>CanopyGlassFront</object-name>
        <object-name>HUDGlass</object-name>
        <object-name>LandingLightGlass</object-name>
        <object-name>SensorGlass</object-name>
    </animation>

	<animation>
		<type>shader</type>
		<shader>chrome</shader>
		<texture>Aircraft/Generic/Effects/glass_shader.png</texture>
        <object-name>CanopyGlass</object-name>
        <object-name>CanopyGlassFront</object-name>
        <object-name>LandingLightGlass</object-name>
        <object-name>SensorGlass</object-name>
	</animation>

   <!-- Liveries -->

    <nasal>
        <load>
            var livery_update = aircraft.livery_update.new("Aircraft/Harrier-GR3/Models/Liveries");
        </load>
        <unload>
            livery_update.stop();
        </unload>
    </nasal>

    <animation>
        <type>material</type>
        <object-name>Fuselage</object-name>
        <object-name>CanopyFront</object-name>
        <object-name>CanopyArch</object-name>
        <object-name>Pitot</object-name>
        <object-name>Wiper</object-name>
        <object-name>FuelProbe</object-name>
        <object-name>AirbrakeBox</object-name>
        <object-name>MiddleGearBox</object-name>
        <object-name>FrontGearBox</object-name>
        <object-name>NozzleBox</object-name>
        <object-name>VentsBox</object-name>
        <object-name>TailSensor</object-name>
        <object-name>Lights</object-name>
        <object-name>Antennas</object-name>
        <object-name>Inlets</object-name>
        <object-name>Sensor</object-name>
        <object-name>SideSensor</object-name>
        <object-name>Edges</object-name>
        <object-name>WindshieldBox</object-name>
        <object-name>PylonInR</object-name>
        <object-name>PylonInL</object-name>
        <object-name>PylonOutR</object-name>
        <object-name>PylonOutL</object-name>
        <object-name>RSpoiler</object-name>
        <object-name>LSpoiler</object-name>
        <object-name>Fin</object-name>
        <object-name>Tail</object-name>
        <object-name>AileronR</object-name>
        <object-name>AileronL</object-name>
        <object-name>FlapR</object-name>
        <object-name>FlapL</object-name>
        <object-name>Elevator</object-name>
        <object-name>Airbrake</object-name>
        <object-name>Rudder</object-name>
        <object-name>VentsR</object-name>
        <object-name>VentsL</object-name>
        <object-name>NozzleFront</object-name>
        <object-name>NozzleBack</object-name>
        <object-name>Turbine</object-name>
        <object-name>FrontWheel</object-name>
        <object-name>LandingLight</object-name>
        <object-name>MainNoseStrut</object-name>
        <object-name>NoseJaw</object-name>
        <object-name>NoseStrutUp</object-name>
        <object-name>RightWheel</object-name>
        <object-name>StrutDownR</object-name>
        <object-name>MainStrutR</object-name>
        <object-name>StrutUpR</object-name>
        <object-name>UpMainStrutR</object-name>
        <object-name>WingGearR</object-name>
        <object-name>LeftWheel</object-name>
        <object-name>StrutDownL</object-name>
        <object-name>MainStrutL</object-name>
        <object-name>StrutUpL</object-name>
        <object-name>UpMainStrutL</object-name>
        <object-name>WingGearL</object-name>
        <object-name>MiddleWheels</object-name>
        <object-name>CenterAxle</object-name>
        <object-name>CenterStrut</object-name>
        <object-name>MiddleDoor</object-name>
        <object-name>MiddleDoorsR</object-name>
        <object-name>MiddleDoorsL</object-name>
        <object-name>NoseDoorsB</object-name>
        <object-name>NoseDoorsR</object-name>
        <object-name>NoseDoorsL</object-name>
        <property-base>sim/model/livery</property-base>
        <texture-prop>texture</texture-prop>
        <texture>Liveries/Default.png</texture>
    </animation>

    <!-- Payload -->

    <model>
        <path>Aircraft/Harrier-GR3/Models/Payload.xml</path>
    </model>

    <animation>
        <type>select</type>
        <object-name>LSpoiler</object-name>
        <condition>
            <equals>
                <property>sim/weight[2]/selected</property>
                <value>none</value>
            </equals>
        </condition>
    </animation>

    <animation>
        <type>select</type>
        <object-name>RSpoiler</object-name>
        <condition>
            <equals>
                <property>sim/weight[4]/selected</property>
                <value>none</value>
            </equals>
        </condition>
    </animation>

    <!-- Animations -->

    <!-- Eject -->

    <animation>
        <type>translate</type>
        <object-name>Pilot</object-name>
        <object-name>Seat</object-name>
        <property>controls/eject</property>
        <factor>20</factor>
        <center>
            <x-m>0</x-m>
            <y-m>0</y-m>
            <z-m>0</z-m>
        </center>
        <axis>
            <x>0</x>
            <y>0</y>
            <z>1</z>
        </axis>
    </animation>

    <animation>
        <type>select</type>
        <object-name>CanopyGlass</object-name>
        <condition>
            <not>
                <property>controls/eject</property>
            </not>
        </condition>
    </animation>

    <!-- Canopy -->

    <animation>
        <type>translate</type>
        <object-name>CanopyGlass</object-name>
        <object-name>CanopyArch</object-name>
        <object-name>CanopyArchInn</object-name>
        <property>canopy/position-norm</property>
        <factor>0.7</factor>
        <axis>
            <x1-m>-15.46</x1-m>
            <y1-m>  0.00</y1-m>
            <z1-m> -5.84</z1-m>
            <x2-m>-14.66</x2-m>
            <y2-m>  0.00</y2-m>
            <z2-m> -5.32</z2-m>
        </axis>
    </animation>

    <!-- Fan -->

    <animation>
        <type>spin</type>
        <object-name>Turbine</object-name>
        <property>engines/engine/n1</property>
        <factor>100</factor>
        <center>
            <x-m>-14.1209</x-m>
            <y-m>-0.0000</y-m>
            <z-m>-5.9131</z-m>
        </center>
        <axis>
            <x>-1</x>
            <y>0</y>
            <z>0</z>
        </axis>
    </animation>

    <!-- Nozzles -->

    <animation>
        <type>rotate</type>
        <object-name>NozzleFront</object-name>
        <property>controls/engines/engine/mixture</property>
        <factor>-100</factor>
        <offset-deg>98</offset-deg>
        <center>
            <x-m>-12.5312</x-m>
            <y-m>  0.0000</y-m>
            <z-m> -5.9515</z-m>
        </center>
        <axis>
            <x>0</x>
            <y>1</y>
            <z>0</z>
        </axis>
    </animation>

    <animation>
        <type>rotate</type>
        <object-name>NozzleBack</object-name>
        <property>controls/engines/engine/mixture</property>
        <factor>-100</factor>
        <offset-deg>98</offset-deg>
        <center>
            <x-m>-10.7281</x-m>
            <y-m>  0.0000</y-m>
            <z-m> -5.9963</z-m>
        </center>
        <axis>
            <x>0</x>
            <y>1</y>
            <z>0</z>
        </axis>
    </animation>

    <!-- Intake Doors -->

    <animation>
        <type>select</type>
        <object-name>VentsR</object-name>
        <object-name>VentsL</object-name>
        <condition>
            <greater-than>
                <property>controls/engines/engine/mixture</property>
                <value>0.7</value>
            </greater-than>
        </condition>
    </animation>

    <!-- Control Surfaces-->

    <!-- Rudder -->

    <animation>
        <type>rotate</type>
        <object-name>Rudder</object-name>
        <property>surface-positions/rudder-pos-norm</property>
        <factor>30</factor>
        <offset-deg>0</offset-deg>
        <axis>
            <x1-m> -5.8131</x1-m>
            <y1-m>  0.0000</y1-m>
            <z1-m> -5.0047</z1-m>
            <x2-m> -5.4988</x2-m>
            <y2-m>  0.0000</y2-m>
            <z2-m> -3.4873</z2-m>
        </axis>
    </animation>

    <!-- Elevators -->

    <animation>
        <type>rotate</type>
        <object-name>Elevator</object-name>
        <property>controls/flight/elevator[0]</property>
        <factor>20</factor>
        <offset-deg>0</offset-deg>
        <axis>
            <x1-m> -6.2617</x1-m>
            <y1-m> -1.0000</y1-m>
            <z1-m> -5.1164</z1-m>
            <x2-m> -6.2617</x2-m>
            <y2-m>  1.0000</y2-m>
            <z2-m> -5.1164</z2-m>
        </axis>
    </animation>

    <!-- Ailerons -->

    <animation>
        <type>rotate</type>
        <object-name>AileronL</object-name>
        <property>controls/flight/aileron[0]</property>
        <factor>25</factor>
        <offset-deg>0</offset-deg>
        <axis>
            <x1-m> -9.3365</x1-m>
            <y1-m> -3.1952</y1-m>
            <z1-m> -5.9473</z1-m>
            <x2-m> -9.5708</x2-m>
            <y2-m> -2.2932</y2-m>
            <z2-m> -5.7478</z2-m>
        </axis>
    </animation>

    <animation>
        <type>rotate</type>
        <object-name>AileronR</object-name>
        <property>controls/flight/aileron[0]</property>
        <factor>25</factor>
        <offset-deg>0</offset-deg>
        <axis>
            <x1-m> -9.3365</x1-m>
            <y1-m>  3.1952</y1-m>
            <z1-m> -5.9473</z1-m>
            <x2-m> -9.5708</x2-m>
            <y2-m>  2.2932</y2-m>
            <z2-m> -5.7478</z2-m>
        </axis>
    </animation>

    <!-- Flaps -->

    <animation>
        <type>rotate</type>
        <object-name>FlapL</object-name>
        <property>controls/flight/flaps[0]</property>
        <factor>50</factor>
        <offset-deg>0</offset-deg>
        <axis>
            <x1-m> -9.5953</x1-m>
            <y1-m> -2.2330</y1-m>
            <z1-m> -5.7364</z1-m>
            <x2-m> -9.9433</x2-m>
            <y2-m> -0.8028</y2-m>
            <z2-m> -5.4505</z2-m>
        </axis>
    </animation>

    <animation>
        <type>rotate</type>
        <object-name>FlapR</object-name>
        <property>controls/flight/flaps[0]</property>
        <factor>-50</factor>
        <offset-deg>0</offset-deg>
        <axis>
            <x1-m> -9.5953</x1-m>
            <y1-m>  2.2330</y1-m>
            <z1-m> -5.7364</z1-m>
            <x2-m> -9.9433</x2-m>
            <y2-m>  0.8028</y2-m>
            <z2-m> -5.4505</z2-m>
        </axis>
    </animation>

    <!-- Air Brake -->

    <animation>
        <type>rotate</type>
        <object-name>Airbrake</object-name>
        <property>surface-positions/speedbrake-pos-norm</property>
        <factor>60</factor>
        <offset-deg>0</offset-deg>
        <center>
            <x-m>-8.8324</x-m>
            <y-m> 0.0000</y-m>
            <z-m>-6.3854</z-m>
        </center>
        <axis>
            <x>0</x>
            <y>1</y>
            <z>0</z>
        </axis>
    </animation>

    <!-- Landing Gear -->

    <animation>
        <type>select</type>
        <object-name>FrontWheel</object-name>
        <object-name>LandingLight</object-name>
        <object-name>LandingLightGlass</object-name>
        <object-name>MainNoseStrut</object-name>
        <object-name>NoseJaw</object-name>
        <object-name>NoseStrutUp</object-name>
        <object-name>MiddleWheels</object-name>
        <object-name>CenterAxle</object-name>
        <object-name>CenterStrut</object-name>
        <condition>
        <greater-than>
            <property>gear/gear[0]/position-norm</property>
            <value>0</value>
        </greater-than>
        </condition>
    </animation>

    <!-- Doors -->

    <!-- Nose Doors -->

    <animation>
        <type>rotate</type>
        <object-name>NoseDoorsL</object-name>
        <property>gear/gear[0]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>-90</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>-90</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>0</dep>
            </entry>
        </interpolation>
        <offset-deg>0</offset-deg>
        <axis>
            <x1-m>-15.0938</x1-m>
            <y1-m> -0.2327</y1-m>
            <z1-m> -6.6446</z1-m>
            <x2-m>-14.0423</x2-m>
            <y2-m> -0.2216</y2-m>
            <z2-m> -6.7206</z2-m>
        </axis>
    </animation>

    <animation>
        <type>rotate</type>
        <object-name>NoseDoorsR</object-name>
        <property>gear/gear[0]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>90</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>90</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>0</dep>
            </entry>
        </interpolation>
        <offset-deg>0</offset-deg>
        <axis>
            <x1-m>-15.0938</x1-m>
            <y1-m>  0.2327</y1-m>
            <z1-m> -6.6446</z1-m>
            <x2-m>-14.0423</x2-m>
            <y2-m>  0.2216</y2-m>
            <z2-m> -6.7206</z2-m>
        </axis>
    </animation>

    <animation>
        <type>rotate</type>
        <object-name>NoseDoorsB</object-name>
        <property>gear/gear[0]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>110</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>110</dep>
            </entry>
        </interpolation>
        <offset-deg>0</offset-deg>
        <axis>
            <x1-m>-13.6955</x1-m>
            <y1-m>  0.2211</y1-m>
            <z1-m> -6.7264</z1-m>
            <x2-m>-13.6955</x2-m>
            <y2-m> -0.2211</y2-m>
            <z2-m> -6.7264</z2-m>
        </axis>
    </animation>

    <!-- Middle Doors -->

    <animation>
        <type>rotate</type>
        <object-name>MiddleDoorsR</object-name>
        <property>gear/gear[0]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>90</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>90</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>0</dep>
            </entry>
        </interpolation>
        <offset-deg>0</offset-deg>
        <axis>
            <x1-m>-9.9238</x1-m>
            <y1-m> 0.3628</y1-m>
            <z1-m>-6.4405</z1-m>
            <x2-m>-9.0259</x2-m>
            <y2-m> 0.3468</y2-m>
            <z2-m>-6.3122</z2-m>
        </axis>
    </animation>

    <animation>
        <type>rotate</type>
        <object-name>MiddleDoorsL</object-name>
        <property>gear/gear[0]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>-90</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>-90</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>0</dep>
            </entry>
        </interpolation>
        <offset-deg>0</offset-deg>
        <axis>
            <x1-m>-9.9238</x1-m>
            <y1-m>-0.3628</y1-m>
            <z1-m>-6.4405</z1-m>
            <x2-m>-9.0259</x2-m>
            <y2-m>-0.3468</y2-m>
            <z2-m>-6.3122</z2-m>
        </axis>
    </animation>

    <animation>
        <type>rotate</type>
        <object-name>MiddleDoor</object-name>
        <property>gear/gear[0]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>-120</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>-120</dep>
            </entry>
        </interpolation>
        <offset-deg>0</offset-deg>
        <axis>
            <x1-m>-10.2822</x1-m>
            <y1-m>  0.0758</y1-m>
            <z1-m> -6.5848</z1-m>
            <x2-m>-10.2822</x2-m>
            <y2-m> -0.0758</y2-m>
            <z2-m> -6.5848</z2-m>
        </axis>
    </animation>

    <!-- Front Gear -->

    <animation>
        <type>rotate</type>
        <object-name>FrontWheel</object-name>
        <object-name>LandingLight</object-name>
        <object-name>LandingLightGlass</object-name>
        <object-name>MainNoseStrut</object-name>
        <object-name>NoseJaw</object-name>
        <object-name>NoseStrutUp</object-name>
        <property>gear/gear[0]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>115</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>115</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>0</dep>
            </entry>
        </interpolation>
        <center>
            <x-m>-13.7292</x-m>
            <y-m>0</y-m>
            <z-m>-6.5564</z-m>
        </center>
        <axis>
            <x>0</x>
            <y>1</y>
            <z>0</z>
        </axis>
    </animation>

    <!-- Middle Gear -->

    <animation>
        <type>rotate</type>
        <object-name>MiddleWheels</object-name>
        <object-name>CenterAxle</object-name>
        <object-name>CenterStrut</object-name>
        <property>gear/gear[1]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>115</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>115</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>0</dep>
            </entry>
        </interpolation>
        <center>
            <x-m>-10.2367</x-m>
            <y-m>0</y-m>
            <z-m>-6.4439</z-m>
        </center>
        <axis>
            <x>0</x>
            <y>-1</y>
            <z>0</z>
        </axis>
    </animation>

    <!-- Side Gear -->

    <animation>
        <type>rotate</type>
        <object-name>RightWheel</object-name>
        <object-name>StrutDownR</object-name>
        <object-name>MainStrutR</object-name>
        <object-name>StrutUpR</object-name>
        <object-name>UpMainStrutR</object-name>
        <object-name>LeftWheel</object-name>
        <object-name>StrutDownL</object-name>
        <object-name>MainStrutL</object-name>
        <object-name>StrutUpL</object-name>
        <object-name>UpMainStrutL</object-name>
        <property>gear/gear[2]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>85</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>85</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>0</dep>
            </entry>
        </interpolation>
        <center>
            <x-m>-9.4396</x-m>
            <y-m>0</y-m>
            <z-m>-6.0113</z-m>
        </center>
        <axis>
            <x>0</x>
            <y>-1</y>
            <z>0</z>
        </axis>
    </animation>

    <animation>
        <type>rotate</type>
        <object-name>WingGearL</object-name>
        <property>gear/gear[2]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>-85</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>-85</dep>
            </entry>
        </interpolation>
        <center>
            <x-m>-9.4396</x-m>
            <y-m>0</y-m>
            <z-m>-6.0113</z-m>
        </center>
        <axis>
            <x>0</x>
            <y>-1</y>
            <z>0</z>
        </axis>
    </animation>

    <animation>
        <type>rotate</type>
        <object-name>WingGearR</object-name>
        <property>gear/gear[2]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>-85</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>-85</dep>
            </entry>
        </interpolation>
        <center>
            <x-m>-9.4396</x-m>
            <y-m>0</y-m>
            <z-m>-6.0113</z-m>
        </center>
        <axis>
            <x>0</x>
            <y>-1</y>
            <z>0</z>
        </axis>
    </animation>

    <!-- Steering-->

    <animation>
        <type>rotate</type>
        <object-name>FrontWheel</object-name>
        <object-name>LandingLight</object-name>
        <object-name>MainNoseStrut</object-name>
        <object-name>NoseJaw</object-name>
        <property>surface-positions/rudder-pos-norm</property>
        <factor>30</factor>
        <center>
            <x-m>-13.7292</x-m>
            <y-m>0</y-m>
            <z-m>-6.5564</z-m>
        </center>
        <axis>
            <x>0</x>
            <y>0</y>
            <z>-1</z>
        </axis>
    </animation>

    <!-- Gear Compression -->

    <!-- Front Gear -->
    <animation>
        <type>rotate</type>
        <object-name>FrontWheel</object-name>
        <object-name>NoseJaw</object-name>
        <property>gear/gear[0]/compression-norm[0]</property>
        <factor>100</factor>
        <offset-deg>0</offset-deg>
        <center>
            <x-m>-13.8757</x-m>
            <y-m>0</y-m>
            <z-m>-7.2154</z-m>
        </center>
        <axis>
            <x>0</x>
            <y>-1</y>
            <z>0</z>
        </axis>
    </animation>

    <!-- Middle Gear -->

    <animation>
        <type>translate</type>
        <object-name>MiddleWheels</object-name>
        <object-name>CenterAxle</object-name>
        <property>gear/gear[1]/compression-norm[0]</property>
        <factor>0.3</factor>
        <axis>
            <x>-1</x>
            <y>0</y>
            <z>0</z>
        </axis>
    </animation>

    <!-- Side Gear -->

    <animation>
        <type>translate</type>
        <object-name>LeftWheel</object-name>
        <object-name>StrutDownL</object-name>
        <object-name>MainStrutL</object-name>
        <property>gear/gear[2]/compression-norm[0]</property>
        <factor>-0.3</factor>
        <axis>
            <x1-m>-9.4396</x1-m>
            <y1-m>-3.2995</y1-m>
            <z1-m>-6.0113</z1-m>
            <x2-m>-9.4297</x2-m>
            <y2-m>-3.2995</y2-m>
            <z2-m>-6.5790</z2-m>
        </axis>
    </animation>

    <animation>
        <type>translate</type>
        <object-name>RightWheel</object-name>
        <object-name>StrutDownR</object-name>
        <object-name>MainStrutR</object-name>
        <property>gear/gear[3]/compression-norm[0]</property>
        <factor>-0.3</factor>
        <axis>
            <x1-m>-9.4396</x1-m>
            <y1-m> 3.2995</y1-m>
            <z1-m>-6.0113</z1-m>
            <x2-m>-9.4297</x2-m>
            <y2-m> 3.2995</y2-m>
            <z2-m>-6.5790</z2-m>
        </axis>
    </animation>

</PropertyList>