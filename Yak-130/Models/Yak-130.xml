<?xml version="1.0"?>

<PropertyList include="Yak-130-bombableinclude.xml">

    <path>Yak-130.ac</path>
	
	<model>
		<usage>interior</usage>
		<path>Aircraft/Yak-130/Models/Cockpit/Cockpit.xml</path>
	</model>
	
    <!-- Rembrandt auto switching for glass -->
	
    <effect>
        <inherits-from>Effects/model-transparent</inherits-from>
        <condition>
            <greater-than>
                <property>sim/multiplay/generic/float[6]</property>
                <value>9</value>
            </greater-than>
            <property>/sim/rendering/rembrandt/enabled</property>
        </condition>
        <object-name>WindGlass</object-name>
        <object-name>Glass</object-name>
    </effect>
	
    <!-- Parts invisible from internally -->
    
    <animation>
        <type>select</type>
        <object-name>WindGlass</object-name>
        <object-name>Glass</object-name>
		<condition>
            <not>
                <property>sim/current-view/internal</property>
            </not>
        </condition>
    </animation>

	
	<!-- Lights -->
	
	<model>
		<name>LightPack</name>
		<path>Aircraft/Yak-130/Models/Lights/LightPack.xml</path>
	</model>
	
	<!-- Effects -->
	
    <model>
       <path>Aircraft/Yak-130/Models/Effects/Effects.xml</path>
    </model>
	
	<!-- Glass shader -->
    
    <animation>
        <type>shader</type>
        <shader>chrome</shader>
        <texture>Aircraft/Generic/Effects/glass_shader.png</texture>
        <object-name>WindGlass</object-name>
        <object-name>Glass</object-name> 
    </animation>
	
	<animation>
		<type>noshadow</type>
        <object-name>WindGlass</object-name>
        <object-name>Glass</object-name> 
	</animation>
    
    <!-- Textures -->
	
	<animation>
		<type>material</type>
        <object-name>WindArch</object-name>
        <object-name>CanopyArch</object-name>
		<object-name>Fuselage</object-name>
        <object-name>R.Lid</object-name>
        <object-name>L.Lid</object-name>
        <object-name>R.FodDoor</object-name>
        <object-name>L.FodDoor</object-name>
        <object-name>R.Intake</object-name>
        <object-name>L.Intake</object-name>
        <object-name>Fin</object-name>
        <object-name>Rudder</object-name>
        <object-name>R.Elevator</object-name>
        <object-name>L.Elevator</object-name>
        <object-name>R.Flap</object-name>
        <object-name>L.Flap</object-name>
        <object-name>R.Slat1</object-name>
        <object-name>R.Slat2</object-name>
        <object-name>L.Slat1</object-name>
        <object-name>L.Slat2</object-name>
        <object-name>R.Aeleron</object-name>
        <object-name>L.Aeleron</object-name>
        <object-name>Airbrake</object-name>
        <object-name>Cylinder</object-name>
        <object-name>CylinderT</object-name>
        <object-name>R.Turbine</object-name>
        <object-name>L.Turbine</object-name>
        <object-name>R.Exhaust</object-name>
        <object-name>L.Exhaust</object-name>
        <object-name>F.GearBox</object-name>
        <object-name>R.GearBox</object-name>
        <object-name>L.GearBox</object-name>
        <object-name>AirbrakeBox</object-name>
        <object-name>Sensors</object-name>
        <object-name>Bar</object-name>
        <object-name>ApuExhaust</object-name>
        <object-name>R.E.Pylon1</object-name>
        <object-name>R.E.Pylon2</object-name>
        <object-name>L.E.Pylon1</object-name>
        <object-name>L.E.Pylon2</object-name>
        <object-name>R.Pylon1</object-name>
        <object-name>R.Pylon2</object-name>
        <object-name>R.Pylon3</object-name>
        <object-name>L.Pylon1</object-name>
        <object-name>L.Pylon2</object-name>
        <object-name>L.Pylon3</object-name>
        <object-name>F.NoseGearDoorR</object-name>
        <object-name>F.NoseGearDoorL</object-name>
        <object-name>R.NoseGearDoor</object-name>
        <object-name>L.NoseGearDoor</object-name>
        <object-name>R.GearDoor1</object-name>
        <object-name>R.GearDoor2</object-name>
        <object-name>R.GearDoor3</object-name>
        <object-name>L.GearDoor1</object-name>
        <object-name>L.GearDoor2</object-name>
        <object-name>L.GearDoor3</object-name>
		<property-base>sim/model/livery</property-base>
		<texture-prop>texture</texture-prop>
		<texture>Aircraft/Yak-130/Models/Liveres/Default.png</texture>
	</animation>
    
    <!-- Multiplayer sound call -->
    
    <sound>
		<path>Aircraft/Yak-130/Sounds/MP-Sound.xml</path>
	</sound>
    
    <nasal>
        
        <load>
            
            <![CDATA[
                #Livery script
                var livery_update = aircraft.livery_update.new("Aircraft/Yak-130/Models/Liveries", 50);
                
var root = cmdarg();
var rootindex = root.getIndex();
var mpPath = "/ai/models/multiplayer["~ rootindex ~"]/";

var lightsPath = mpPath~"lightpack/"; #path to the property node, where all internal values are placed

props.globals.initNode(mpPath~"sim/is-MP-Aircraft", 1, "BOOL");

srand();
#wherever you want to add randomization of time, use something like:  + rand()*0.05-0.025 (included by default where appropriate)


#list of switches for lights - if you don't intend to use some light, assign it nil value instead, like whateverSwitch = nil; and you don't need to care about anything else
#IMPORTANT: don't put / on the start of the string, it's already included in the mpPath property
var navSwitch = mpPath~"controls/lighting/nav-lights-switch";
var beaconSwitch = mpPath~"controls/lighting/beacon-switch";
var strobeSwitch = nil;
var landingSwitch = mpPath~"controls/lighting/landing-lights-switch";
var taxiSwitch = nil;
var probeSwitch = nil;
var whiteSwitch = nil;

#switch this from 1 to 0 if you want to use advanced cyclical fading animation of the the nav lights instead of being stable on when the switch is on
navStillOn = 1;


#I need to set listener on some MP transferred properties; this doesn't seem to work well sometimes, so I mirror them to the original location on any change
#This also simplifies work as I can use almost the same code for MP as is the local Nasal. Furthermore, I can use meaningful property names in the model XML files instead of referencing the MP properties. 
var mpVar = {
	new: func(propIn, propOut) {
		var m = { parents: [mpVar] };
		m.propIn = propIn;
		m.propOut = propOut;
		if(propIn==nil) return m;
		m.value = getprop(propIn);
		setprop(propOut, m.value);
		return m;
	},
	check: func {
		if(me.propIn==nil) return;
		var newValue = getprop(me.propIn);
		if(newValue != me.value) {
			setprop(me.propOut, newValue);
			me.value = newValue;
			#print("value of "~me.propOut~" changed: "~newValue);
		}
	},
};
#init any property copy object needed in this array (anything you need to transfer over MP, but you are using the original paths in your xmls)
#also used for properties you are using a listener on, or properties which you maybe want to manipulate during the <unload> 
#if you're just using the pack, change the values according to the MP bindings in the -set.xml file
#you don't need to delete the entries if the path is nil - it gets skipped automatically and the MP path is just ignored
var mirrorValues = [
	mpVar.new(mpPath~"sim/multiplay/generic/int[0]", mpPath~"sim/crashed"),
	mpVar.new(mpPath~"sim/multiplay/generic/int[4]", navSwitch),
	mpVar.new(mpPath~"sim/multiplay/generic/int[1]", beaconSwitch),
	mpVar.new(mpPath~"sim/multiplay/generic/int[1]", strobeSwitch),
	mpVar.new(mpPath~"sim/multiplay/generic/int[2]", landingSwitch),
	mpVar.new(mpPath~"sim/multiplay/generic/int[3]", taxiSwitch),
	mpVar.new(mpPath~"sim/multiplay/generic/int[3]", probeSwitch),
	mpVar.new(mpPath~"sim/multiplay/generic/int[0]", whiteSwitch),
];
#loop at the default MP transfer frequency (10Hz)
var mirrorTimer = maketimer(0.1, func {
	foreach(var mir; mirrorValues) {
		mir.check();
	}
});
mirrorTimer.start();



#### NAV LIGHTS ####

#class for a periodic fade in/out animation - for flashing, use rather standard aircraft.light.new(), as in Beacon and Strobe section
var lightCycle = {
	#constructor
	new: func(propSwitch, propOut) {
		m = { parents: [lightCycle] };
		props.globals.initNode(propOut, 0, "DOUBLE");
		props.globals.initNode(propSwitch, 1, "BOOL");
		m.fadeIn = 0.4 + rand()*0.05-0.025; #fade in time
		m.fadeOut = 0.4 + rand()*0.05-0.025; #fade out time
		m.stayOn = 1.5 + rand()*0.05-0.025; #stable on period
		m.stayOff = 1 + rand()*0.05-0.025; #stable off period
		m.turnOff = 0.12; #fade out time when turned off
		m.phase = 0; #phase to be run on next timer call: 0 -> fade in, 1 -> stay on, 2 -> fade out, 3 -> stay off
		m.cycleTimer = maketimer(0.1, func {
			if(getprop(propSwitch)) {
				if(m.phase == 0) {
					interpolate(propOut, 1, m.fadeIn);
					m.phase = 1;
					m.cycleTimer.restart(m.fadeIn);
				}
				else if(m.phase == 1){
					m.phase = 2;
					m.cycleTimer.restart(m.stayOn);
				}
				else if(m.phase == 2){
					interpolate(propOut, 0, m.fadeOut);
					m.phase = 3;
					m.cycleTimer.restart(m.fadeOut);
				}
				else if(m.phase == 3){
					m.phase = 0;
					m.cycleTimer.restart(m.stayOff);
				}
			}
			else {
				interpolate(propOut, 0, m.turnOff); #kills any currently ongoing interpolation
				m.phase = 0;
			}
		});
		m.cycleTimer.singleShot = 1;
		if(propSwitch==nil) {
			m.listen = nil;
			return m;
		}
		m.listen = setlistener(propSwitch, func{m.cycleTimer.restart(0);}); #handle switch changes
		m.cycleTimer.restart(0); #start the looping
		return m;
	},
	#destructor
	del: func {
		if(me.listen!=nil) removelistener(me.listen);
		me.cycleTimer.stop();
	},
};

#By default, the switch property is initialized to 1 (only if no value is already assigned). Don't change the class implementation! To override this, set the property manually. You don't need to care if any other code already does it for you. 
var navLights = nil;
if(!navStillOn) {
	navLights = lightCycle.new(navSwitch, lightsPath~"nav-lights-intensity");
	### Uncomment and tune those to customize times ###
	#navLights.fadeIn = 0.4; #fade in time 
	#navLights.fadeOut = 0.4; #fade out time
	#navLights.stayOn = 3 + rand()*0.05-0.025; #stable on period
	#navLights.stayOff = 0.6; #stable off period
	#navLights.turnOff = 0.12; #fade out time when turned off
}


### BEACON ###
var beacon = nil;
if(beaconSwitch!=nil) {
	props.globals.initNode(beaconSwitch, 1, "BOOL");
	beacon = aircraft.light.new(lightsPath~"beacon-state", 
		[0.0, 1.0 + rand()*0.05-0.025], beaconSwitch);
}
	
	
### STROBE ###
var strobe = nil;
if(strobeSwitch!=nil) {
	props.globals.initNode(strobeSwitch, 1, "BOOL");
	strobe = aircraft.light.new(lightsPath~"strobe-state", 
		[0.0, 0.87 + rand()*0.05-0.025], strobeSwitch);
}


### LIGHT FADING ###

#class for controlling fade in/out behavior - propIn is a control property (handled as a boolean) and propOut is interpolated
#all light brightness animations in xmls depend on propOut (Rembrandt brightness, material emission, flares transparency, ...)
var lightFadeInOut = {
	#constructor
	new: func(propSwitch, propOut) {
		m = { parents: [lightFadeInOut] };
		m.fadeIn = 0.3; #some sane defaults
		m.fadeOut = 0.4;
		if(propSwitch==nil) {
			m.listen = nil;
			return m;
		}
		props.globals.initNode(propSwitch, 1, "BOOL");
		m.isOn = getprop(propSwitch);
		props.globals.initNode(propOut, m.isOn, "DOUBLE");
		m.listen = setlistener(propSwitch, 
			func {
				if(m.isOn and !getprop(propSwitch)) {
					interpolate(propOut, 0, m.fadeOut);
					m.isOn = 0;
				}
				if(!m.isOn and getprop(propSwitch)) {
					interpolate(propOut, 1, m.fadeIn);
					m.isOn = 1;
				}
			}
		);
		return m;
	},
	#destructor
	del: func {
		if(me.listen!=nil) removelistener(me.listen);
	},
};

fadeLanding = lightFadeInOut.new(landingSwitch, lightsPath~"landing-lights-intensity");
fadeTaxi = lightFadeInOut.new(taxiSwitch, lightsPath~"taxi-light-intensity");
fadeProbe = lightFadeInOut.new(probeSwitch, lightsPath~"probe-light-intensity");
fadeWhite = lightFadeInOut.new(whiteSwitch, lightsPath~"white-light-intensity");
if(navStillOn) {
	navLights = lightFadeInOut.new(navSwitch, lightsPath~"nav-lights-intensity");
	navLights.fadeIn = 0.1;
	navLights.fadeOut = 0.12;
}
#manipulate times if defaults don't fit your needs:
#fadeLanding.fadeIn = 0.5;
#fadeLanding.fadeOut = 0.8;

                
                #flame Rembrandt light brightness alternation
                var flamePath = "/ai/models/multiplayer["~ rootindex ~"]/sim/model/V-1/";
                props.globals.initNode(flamePath ~ "flameBright", 0.0, "DOUBLE");
                var flameSeq = [0,0,0,0];
                var curSeq = 0;
                var flameBright = func {
                flameSeq[curSeq] = 0.5 + rand()*0.5;
                
                setprop(flamePath ~ "flameBright", 
                (flameSeq[0]+flameSeq[1]+flameSeq[2]+flameSeq[3]) / 4);
                
                if( curSeq < 3)
                curSeq += 1;
                else
                curSeq = 0;
                
                settimer(flameBright, 0.02);
                }
                
                settimer(flameBright, 0.02);
                
                
props.globals.initNode(mpPath~"disintegration/explosion/explode", 0, "BOOL");
props.globals.initNode(mpPath~"disintegration/explosion/fire", 0, "BOOL");

#detonation with fire
var explode = func(fire) {
	setprop(mpPath~"disintegration/explosion/explode", 1);
	if(fire) {
		setprop(mpPath~"disintegration/explosion/fire", 1);
	}
	settimer( func {setprop(mpPath~"disintegration/explosion/explode", 0);} , 0.2);
}

var stopFire = func {
	setprop(mpPath~"disintegration/explosion/fire", 0);
}


var listenCrash = setlistener(mpPath~"sim/crashed", func{if(getprop(mpPath~"sim/crashed")){explode(1);}else{stopFire();}});


var stringIndex = 0; #index of sim/multiplay/generic/string[i] which is used for transfer
var intProp = "payload-int"; #expects existence of this property carrying int identifier of the payload option in every /sim/weight[i]/ - set this according to your payload management script
var MpDecode = func {
	var decodedArray = split(",", getprop(mpPath~"sim/multiplay/generic/string["~stringIndex~"]"));
	forindex(var i; decodedArray) {
		setprop(mpPath~"sim/weight["~i~"]/"~intProp, decodedArray[i]);
	}
}
var listenMpDecode = setlistener(mpPath~"sim/multiplay/generic/string["~stringIndex~"]", MpDecode, 1, 0);

            ]]>
            
        </load>
        
        <unload>
      livery_update.stop();
      
      stopFire();
      disintegrated = 0;
      removelistener(listenCrash);
      
      #prevent multiple timers and listeners from running and fighting on next connect
      #cleanly destroy MP property mirroring
      mirrorTimer.stop();
      mirrorTimer = nil;
      mirrorValues = nil;
      
      #cleanly destroy nav lights
      if(navStillOn) {
      	navLights.del();
      }
      else {
      	if(navSwitch!=nil) setprop(navSwitch, 0);
      	navLights.del();
      	if(navSwitch!=nil) navLights.cycleTimer = nil;
      	navLights = nil;
      }
      
      #cleanly destroy beacon
      if(beaconSwitch!=nil) setprop(beaconSwitch, 0);
      beacon.del();
      beacon = nil;
      
      #cleanly destroy strobe
      if(strobeSwitch!=nil) setprop(strobeSwitch, 0);
      strobe.del();
      strobe = nil;
      
      #cleanly destroy light fade in/out animation objects
      fadeLanding.del();
      fadeTaxi.del();
      fadeProbe.del();
      fadeWhite.del();
      
      removelistener(listenMpDecode);
            
        </unload>
    </nasal>
	
	<!-- Payload -->
	
	<model>
		<path>Aircraft/Yak-130/Models/Payload/Payload.xml</path>
	</model>
    
    <!-- Parts invisible from internally -->
    
    <animation>
        <type>select</type>
        <object-name>Pilot</object-name>
        <object-name>Co-pilot</object-name>
        <object-name>WindGlass</object-name>
        <object-name>Glass</object-name>
		<condition>
            <not>
                <property>sim/current-view/internal</property>
            </not>
        </condition>
    </animation>
    
    <!-- Animations -->
    
    <!-- Rudder -->
	
	<animation>
		<type>rotate</type>
		<object-name>Rudder</object-name>
		<property>surface-positions/rudder-pos-norm</property>
		<factor>35</factor>
		<axis>
			<x1-m>5.3726</x1-m>
			<y1-m>0.0000</y1-m>
			<z1-m>2.8088</z1-m>
			<x2-m>4.3692</x2-m>
			<y2-m>0.0000</y2-m>
			<z2-m>0.8180</z2-m>
		</axis>
	</animation>
    
    <!-- Elevators -->
    
    <animation>
		<type>rotate</type>
		<object-name>R.Elevator</object-name>
		<property>surface-positions/elevator-pos-norm</property>
		<factor>20</factor>
		<center>
			<x-m>4.9067</x-m>
			<y-m>0.3255</y-m>
			<z-m>0.3564</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>1</y>
			<z>0</z>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>L.Elevator</object-name>
		<property>surface-positions/elevator-pos-norm</property>
		<factor>20</factor>
		<center>
			<x-m> 4.9067</x-m>
			<y-m>-0.3255</y-m>
			<z-m> 0.3564</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>1</y>
			<z>0</z>
		</axis>
	</animation>
    
    <!-- Ailerons -->
	
    <animation>
        <type>rotate</type>
        <object-name>R.Aeleron</object-name>
        <property>surface-positions/aileron-pos-norm</property>
        <factor>20</factor>
        <axis>
            <x1-m>2.5811</x1-m>
            <y1-m>4.7151</y1-m>
            <z1-m>0.2900</z1-m>
            <x2-m>2.2872</x2-m>
            <y2-m>3.0199</y2-m>
            <z2-m>0.2877</z2-m>
        </axis>
    </animation>
    
    <animation>
        <type>rotate</type>
        <object-name>L.Aeleron</object-name>
        <property>surface-positions/aileron-pos-norm</property>
        <factor>20</factor>
        <axis>
            <x1-m> 2.5811</x1-m>
            <y1-m>-4.7151</y1-m>
            <z1-m> 0.2900</z1-m>
            <x2-m> 2.2872</x2-m>
            <y2-m>-3.0199</y2-m>
            <z2-m> 0.2877</z2-m>
        </axis>
    </animation>
    
    <!-- Flaps -->
    
    <animation>
        <type>rotate</type>
        <object-name>R.Flap</object-name>
        <property>surface-positions/flap-pos-norm</property>
        <factor>-55</factor>
        <axis>
            <x1-m>2.1193</x1-m>
            <y1-m>2.4341</y1-m>
            <z1-m>0.1674</z1-m>
            <x2-m>2.1193</x2-m>
            <y2-m>1.6800</y2-m>
            <z2-m>0.1616</z2-m>
        </axis>
    </animation>
    
    <animation>
        <type>rotate</type>
        <object-name>L.Flap</object-name>
        <property>surface-positions/flap-pos-norm</property>
        <factor>55</factor>
        <axis>
            <x1-m> 2.1193</x1-m>
            <y1-m>-2.4341</y1-m>
            <z1-m> 0.1674</z1-m>
            <x2-m> 2.1193</x2-m>
            <y2-m>-1.6800</y2-m>
            <z2-m> 0.1616</z2-m>
        </axis>
    </animation>
    
    <!-- Slats -->
    
    <animation>
		<type>rotate</type>
		<object-name>R.Slat1</object-name>
		<property>surface-positions/slat-pos-norm</property>
		<factor>25</factor>
		<axis>
			<x1-m>2.0764</x1-m>
			<y1-m>4.7151</y1-m>
			<z1-m>0.3107</z1-m>
			<x2-m>1.3346</x2-m>
			<y2-m>3.1948</y2-m>
			<z2-m>0.3208</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>R.Slat2</object-name>
		<property>surface-positions/slat-pos-norm</property>
		<factor>25</factor>
		<axis>
			<x1-m>1.3346</x1-m>
			<y1-m>3.1948</y1-m>
			<z1-m>0.3208</z1-m>
			<x2-m>0.4262</x2-m>
			<y2-m>1.2619</y2-m>
			<z2-m>0.3332</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>L.Slat1</object-name>
		<property>surface-positions/slat-pos-norm</property>
		<factor>-25</factor>
		<axis>
			<x1-m> 2.0764</x1-m>
			<y1-m>-4.7151</y1-m>
			<z1-m> 0.3107</z1-m>
			<x2-m> 1.3346</x2-m>
			<y2-m>-3.1948</y2-m>
			<z2-m> 0.3208</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>L.Slat2</object-name>
		<property>surface-positions/slat-pos-norm</property>
		<factor>-25</factor>
		<axis>
			<x1-m> 1.3346</x1-m>
			<y1-m>-3.1948</y1-m>
			<z1-m> 0.3208</z1-m>
			<x2-m> 0.4262</x2-m>
			<y2-m>-1.2619</y2-m>
			<z2-m> 0.3332</z2-m>
		</axis>
	</animation>
    
    <!-- Speedbrake -->
	
	<animation>
		<type>rotate</type>
		<object-name>Airbrake</object-name>
        <object-name>Cylinder</object-name>
        <object-name>CylinderT</object-name>
		<property>surface-positions/speedbrake-pos-norm</property>
		<factor>70</factor>
		<axis>
			<x1-m> 1.1934</x1-m>
			<y1-m> 0.2208</y1-m>
			<z1-m> 0.8704</z1-m>
			<x2-m> 1.1934</x2-m>
			<y2-m>-0.2208</y2-m>
			<z2-m> 0.8704</z2-m>
		</axis>
	</animation>
    
    <!-- FOB doors -->
    
    <animation>
        <type>rotate</type>
        <object-name>R.FodDoor</object-name>
        <property>gear/gear[0]/position-norm</property>
        <factor>65</factor>
        <axis>
            <x1-m>-0.8539</x1-m>
            <y1-m> 0.6490</y1-m>
            <z1-m> 0.4007</z1-m>
            <x2-m>-0.8346</x2-m>
            <y2-m> 1.0054</y2-m>
            <z2-m> 0.2985</z2-m>
        </axis>
    </animation>
    
    <animation>
        <type>rotate</type>
        <object-name>L.FodDoor</object-name>
        <property>gear/gear[0]/position-norm</property>
        <factor>-65</factor>
        <axis>
            <x1-m>-0.8539</x1-m>
            <y1-m>-0.6490</y1-m>
            <z1-m> 0.4007</z1-m>
            <x2-m>-0.8346</x2-m>
            <y2-m>-1.0054</y2-m>
            <z2-m> 0.2985</z2-m>

        </axis>
    </animation>
    
    <!-- Lids -->
    
    <animation>
        <type>select</type>
        <object-name>R.Lid</object-name>
        <object-name>L.Lid</object-name>
        <condition>
            <not>
                <property>gear/gear[0]/position-norm</property>
                <value>1</value>
            </not>
        </condition>
    </animation>
    
    <!-- Canopy -->

     <animation>
        <type>rotate</type>
        <object-name>CanopyArch</object-name>
         <object-name>Glass</object-name>
         <property>/canopy/position-norm</property>
         <factor>95</factor>
         <axis>
             <x1-m>-0.5467</x1-m>
             <y1-m> 0.4722</y1-m>
             <z1-m> 0.8232</z1-m>
             <x2-m>-2.6963</x2-m>
             <y2-m> 0.4776</y2-m>
             <z2-m> 0.2720</z2-m>
         </axis>
     </animation>
	 
     <!-- Eject -->

	 <animation>
		 <type>translate</type>
		 <object-name>Pilot</object-name>
		 <object-name>Co-pilot</object-name>
		 <object-name>Seat1</object-name>
		 <object-name>Seat2</object-name>
		 <property>controls/eject</property>
		 <factor>20</factor>
		 <center>
			 <x-m>0</x-m>
			 <y-m>0</y-m>
			 <z-m>0</z-m>
		 </center>
		 <axis>
			 <x>0</x>
			 <y>0</y>
			 <z>1</z>
		 </axis>
	 </animation>
	 
	 <animation>
		 <type>select</type>
		 <object-name>Glass</object-name>
		 <condition>
			 <not>
				 <property>controls/eject</property>
			 </not>
		 </condition>
	 </animation>
    
    <!-- Engines -->
    
    <animation>
		<type>spin</type>
		<object-name>R.Turbine</object-name>
		<property>engines/engine[0]/running</property>
		<factor>100</factor>
		<center>
			<x-m> 0.8531</x-m>
			<y-m> 0.7329</y-m>
			<z-m> 0.1922</z-m>
		</center>
		<axis>
			<x>-1</x>
			<y>0</y>
			<z>0</z>
		</axis>
	</animation>
	
	<animation>
		<type>spin</type>
		<object-name>L.Turbine</object-name>
		<property>engines/engine[1]/running</property>
		<factor>100</factor>
		<center>
			<x-m> 0.8531</x-m>
			<y-m>-0.7329</y-m>
			<z-m> 0.1922</z-m>
		</center>

		<axis>
			<x>1</x>
			<y>0</y>
			<z>0</z>
		</axis>
	</animation>
    
    <!-- Landing gear doors -->
    
    <!-- Front gear doors -->
    
	<animation>
		<type>rotate</type>
		<object-name>F.NoseGearDoorR</object-name>
		<property>gear/gear[0]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>90</dep>
            </entry>
        </interpolation>
		<axis>
			<x1-m>-3.0286</x1-m>
			<y1-m> 0.1876</y1-m>
			<z1-m>-0.5629</z1-m>
			<x2-m>-2.7163</x2-m>
			<y2-m> 0.1912</y2-m>
			<z2-m>-0.5684</z2-m>
		</axis>
	</animation>
    
	<animation>
		<type>rotate</type>
		<object-name>F.NoseGearDoorL</object-name>
		<property>gear/gear[0]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>-90</dep>
            </entry>
        </interpolation>
		<axis>
			<x1-m>-3.0286</x1-m>
			<y1-m>-0.1876</y1-m>
			<z1-m>-0.5629</z1-m>
			<x2-m>-2.7163</x2-m>
			<y2-m>-0.1912</y2-m>
			<z2-m>-0.5684</z2-m>
		</axis>
	</animation>
    
    <animation>
		<type>rotate</type>
		<object-name>R.NoseGearDoor</object-name>
		<property>gear/gear[0]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>90</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-2.7164</x1-m>
			<y1-m> 0.1977</y1-m>
			<z1-m>-0.5690</z1-m>
			<x2-m>-1.6716</x2-m>
			<y2-m> 0.1965</y2-m>
			<z2-m>-0.5689</z2-m>
		</axis>
	</animation>
    
    <animation>
		<type>rotate</type>
		<object-name>L.NoseGearDoor</object-name>
		<property>gear/gear[0]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-90</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-2.7164</x1-m>
			<y1-m>-0.1977</y1-m>
			<z1-m>-0.5690</z1-m>
			<x2-m>-1.6716</x2-m>
			<y2-m>-0.1965</y2-m>
			<z2-m>-0.5689</z2-m>
		</axis>
	</animation>
    
	<!-- Right gear doors -->
	
    <animation>
        <type>rotate</type>
        <object-name>R.GearDoor1</object-name>
        <property>gear/gear[1]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>90</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>90</dep>
            </entry>
        </interpolation>
        <axis>
            <x1-m> 0.6516</x1-m>
            <y1-m> 1.1095</y1-m>
            <z1-m>-0.3704</z1-m>
            <x2-m> 1.1122</x2-m>
            <y2-m> 1.1068</y2-m>
            <z2-m>-0.3464</z2-m>
        </axis>
    </animation>
     
    <animation>
        <type>rotate</type>
        <object-name>R.GearDoor2</object-name>
        <property>gear/gear[1]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>90</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>0</dep>
            </entry>
        </interpolation>
        <axis>
            <x1-m> 1.1122</x1-m>
            <y1-m> 0.8783</y1-m>
            <z1-m>-0.5259</z1-m>
            <x2-m> 1.7540</x2-m>
            <y2-m> 0.8796</y2-m>
            <z2-m>-0.5109</z2-m>
        </axis>
    </animation>
    
    <animation>
        <type>rotate</type>
        <object-name>R.GearDoor3</object-name>
        <property>gear/gear[1]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>-90</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>0</dep>
            </entry>
        </interpolation>
        <axis>
            <x1-m> 0.6485</x1-m>
            <y1-m> 0.0339</y1-m>
            <z1-m>-0.5672</z1-m>
            <x2-m> 1.7548</x2-m>
            <y2-m> 0.0288</y2-m>
            <z2-m>-0.5726</z2-m>
        </axis>
    </animation>
    
    <!-- Left gear doors -->
    
    <animation>
        <type>rotate</type>
        <object-name>L.GearDoor1</object-name>
        <property>gear/gear[2]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>-90</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>-90</dep>
            </entry>
        </interpolation>
        <axis>
            <x1-m> 0.6516</x1-m>
            <y1-m>-1.1095</y1-m>
            <z1-m>-0.3704</z1-m>
            <x2-m> 1.1122</x2-m>
            <y2-m>-1.1068</y2-m>
            <z2-m>-0.3464</z2-m>
        </axis>
    </animation>
    
    <animation>
        <type>rotate</type>
        <object-name>L.GearDoor2</object-name>
        <property>gear/gear[2]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>-90</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>0</dep>
            </entry>
        </interpolation>
        <axis>
            <x1-m> 1.1122</x1-m>
            <y1-m>-0.8783</y1-m>
            <z1-m>-0.5259</z1-m>
            <x2-m> 1.7540</x2-m>
            <y2-m>-0.8796</y2-m>
            <z2-m>-0.5109</z2-m>
        </axis>
    </animation>
    
    <animation>
        <type>rotate</type>
        <object-name>L.GearDoor3</object-name>
        <property>gear/gear[2]/position-norm</property>
        <interpolation>
            <entry>
                <ind>0.0</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.1</ind>
                <dep>0</dep>
            </entry>
            <entry>
                <ind>0.9</ind>
                <dep>90</dep>
            </entry>
            <entry>
                <ind>1.0</ind>
                <dep>0</dep>
            </entry>
        </interpolation>
        <axis>
            <x1-m> 0.6485</x1-m>
            <y1-m>-0.0339</y1-m>
            <z1-m>-0.5672</z1-m>
            <x2-m> 1.7548</x2-m>
            <y2-m>-0.0288</y2-m>
            <z2-m>-0.5726</z2-m>
        </axis>
    </animation>
    
    <!-- Landing gear -->
	
	<!-- Nose Gear -->
	
	<animation>
		<type>select</type>
		<object-name>WheelNose</object-name>
		<object-name>WheelShaft</object-name>
		<object-name>WheelShaftStrut</object-name>
		<object-name>NoseStrutMain</object-name>
		<object-name>NoseStrutUp1</object-name>
		<object-name>NoseStrutUp2</object-name>
		<object-name>NoseStrutDown</object-name>
		<object-name>NoseStrutDown</object-name>
		<condition>
			<greater-than>
				<property>gear/gear[0]/position-norm</property>
				<value>0</value>
			</greater-than>
		</condition>
	</animation>
    
	<animation>
		<type>rotate</type>
		<object-name>WheelNose</object-name>
		<object-name>WheelShaft</object-name>
		<object-name>WheelShaftStrut</object-name>
		<object-name>NoseStrutMain</object-name>
		<object-name>NoseStrutUp1</object-name>
		<object-name>NoseStrutUp2</object-name>
		<object-name>NoseStrutDown</object-name>
		<object-name>NoseStrutDown</object-name>
		<property>gear/gear[0]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>-100</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-100</dep>
			</entry>
			<entry>
				<ind>0.6</ind>
				<dep>-100</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<center>
			<x-m>-2.7246</x-m>
			<y-m> 0.0000</y-m>
			<z-m>-0.4231</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>1</y>
			<z>0</z>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>WheelNose</object-name>
		<object-name>WheelShaft</object-name>
		<object-name>WheelShaftStrut</object-name>
		<object-name>NoseStrutMain</object-name>
		<object-name>NoseStrutDown</object-name>
		<object-name>NoseStrutDown</object-name>
		<property>surface-positions/rudder-pos-norm</property>
		<factor>-20</factor>
        <axis>
            <x1-m>-2.7245</x1-m>
            <y1-m> 0.0000</y1-m>
            <z1-m>-0.4220</z1-m>
            <x2-m>-2.7566</x2-m>
            <y2-m> 0.0000</y2-m>
            <z2-m>-1.0685</z2-m>
        </axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>NoseStrutUp1</object-name>
		<object-name>NoseStrutUp2</object-name>
		<property>gear/gear[0]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>80</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>80</dep>
			</entry>
			<entry>
				<ind>0.6</ind>
				<dep>80</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<center>
			<x-m>-2.8024</x-m>
			<y-m> 0.0000</y-m>
			<z-m>-0.7962</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>1</y>
			<z>0</z>
		</axis>
	</animation>
	
	<!-- Nose Gear Compression -->
	
	<animation>
		<type>rotate</type>
		<object-name>WheelNose</object-name>
		<object-name>WheelShaft</object-name>
		<object-name>WheelShaftStrut</object-name>
		<property>gear/gear[0]/compression-norm[0]</property>
		<factor>50</factor>
		<center>
			<x-m>-2.7579</x-m>
			<y-m> 0.0000</y-m>
			<z-m>-1.0958</z-m>
		</center>
		<axis>
			<x> 0</x>
			<y>-1</y>
			<z> 0</z>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>WheelShaftStrut</object-name>
		<property>gear/gear[0]/compression-norm[0]</property>
		<factor>50</factor>
		<center>
			<x-m>-2.8428</x-m>
			<y-m> 0.0000</y-m>
			<z-m>-0.9945</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>1</y>
			<z>0</z>
		</axis>
	</animation>
	
	<!-- Left Gear -->
	
	<animation>
		<type>select</type>
		<object-name>WheelLeft</object-name>
		<object-name>WheelShaftLeft</object-name>
		<object-name>StrutDownLeft</object-name>
		<object-name>StrutDown1Left</object-name>
		<object-name>StrutDown2Left</object-name>
		<object-name>StrutUpLeft</object-name>
		<object-name>StrutUpFrontLeft</object-name>
		<object-name>StrutMiddle1Left</object-name>
		<object-name>StrutMiddle2Left</object-name>
		<object-name>StrutFrontLeft</object-name>
		<object-name>LeverUpLeft</object-name>
		<condition>
			<greater-than>
				<property>gear/gear[1]/position-norm</property>
				<value>0</value>
			</greater-than>
		</condition>
	</animation>
    
	<animation>
		<type>rotate</type>
		<object-name>WheelLeft</object-name>
		<object-name>WheelShaftLeft</object-name>
		<object-name>StrutDownLeft</object-name>
		<object-name>StrutDown1Left</object-name>
		<object-name>StrutDown2Left</object-name>
		<object-name>StrutUpLeft</object-name>
		<object-name>StrutUpFrontLeft</object-name>
		<object-name>StrutMiddle1Left</object-name>
		<object-name>StrutMiddle2Left</object-name>
		<object-name>StrutFrontLeft</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>110</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>110</dep>
			</entry>
			<entry>
				<ind>0.6</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<center>
			<x-m> 1.3286</x-m>
			<y-m> 0.8282</y-m>
			<z-m>-0.4460</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>1</y>
			<z>0</z>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>WheelLeft</object-name>
		<object-name>WheelShaftLeft</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>120</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>120</dep>
			</entry>
			<entry>
				<ind>0.6</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m> 1.0524</x1-m>
			<y1-m>-0.8284</y1-m>
			<z1-m>-0.9695</z1-m>
			<x2-m> 1.1402</x2-m>
			<y2-m>-0.8284</y2-m>
			<z2-m>-0.9849</z2-m>
		</axis>
	</animation>
	
	<!-- Left Gear Compression -->
	
	<animation>
		<type>rotate</type>
		<object-name>WheelLeft</object-name>
		<object-name>WheelShaftLeft</object-name>
		<object-name>StrutDownLeft</object-name>
		<object-name>StrutDown1Left</object-name>
		<property>gear/gear[1]/compression-norm[1]</property>
		<factor>60</factor>
		<center>
			<x-m> 1.0670</x-m>
			<y-m> 0.8284</y-m>
			<z-m>-1.0000</z-m>
		</center>
		<axis>
			<x> 0</x>
			<y>-1</y>
			<z> 0</z>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>StrutDown2Left</object-name>
		<property>gear/gear[1]/compression-norm[1]</property>
		<factor>60</factor>
		<center>
			<x-m> 1.3493</x-m>
			<y-m>-0.8284</y-m>
			<z-m>-0.7502</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>1</y>
			<z>0</z>
		</axis>
	</animation>
	
	<!-- Right Gear -->
	
	<animation>
		<type>select</type>
		<object-name>WheelRight</object-name>
		<object-name>WheelShaftRight</object-name>
		<object-name>StrutDownRight</object-name>
		<object-name>StrutDown1Right</object-name>
		<object-name>StrutDown2Right</object-name>
		<object-name>StrutUpRight</object-name>
		<object-name>StrutUpFrontRight</object-name>
		<object-name>StrutMiddle1Right</object-name>
		<object-name>StrutMiddle2Right</object-name>
		<object-name>StrutFrontRight</object-name>
		<object-name>LeverUpRight</object-name>
		<condition>
			<greater-than>
				<property>gear/gear[2]/position-norm</property>
				<value>0</value>
			</greater-than>
		</condition>
	</animation>
    
	<animation>
		<type>rotate</type>
		<object-name>WheelRight</object-name>
		<object-name>WheelShaftRight</object-name>
		<object-name>StrutDownRight</object-name>
		<object-name>StrutDown1Right</object-name>
		<object-name>StrutDown2Right</object-name>
		<object-name>StrutUpRight</object-name>
		<object-name>StrutUpFrontRight</object-name>
		<object-name>StrutMiddle1Right</object-name>
		<object-name>StrutMiddle2Right</object-name>
		<object-name>StrutFrontRight</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>-110</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-110</dep>
			</entry>
			<entry>
				<ind>0.6</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<center>
			<x-m> 1.3286</x-m>
			<y-m>-0.8282</y-m>
			<z-m>-0.4460</z-m>
		</center>
		<axis>
			<x> 0</x>
			<y>-1</y>
			<z> 0</z>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>WheelRight</object-name>
		<object-name>WheelShaftRight</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>-120</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-120</dep>
			</entry>
			<entry>
				<ind>0.6</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m> 1.0524</x1-m>
			<y1-m> 0.8284</y1-m>
			<z1-m>-0.9695</z1-m>
			<x2-m> 1.1402</x2-m>
			<y2-m> 0.8284</y2-m>
			<z2-m>-0.9849</z2-m>
		</axis>
	</animation>
	
	<!-- Right Gear Compression -->
	
	<animation>
		<type>rotate</type>
		<object-name>WheelRight</object-name>
		<object-name>WheelShaftRight</object-name>
		<object-name>StrutDownRight</object-name>
		<object-name>StrutDown1Right</object-name>
		<property>gear/gear[2]/compression-norm[2]</property>
		<factor>60</factor>
		<center>
			<x-m> 1.0670</x-m>
			<y-m> 0.8284</y-m>
			<z-m>-1.0000</z-m>
		</center>
		<axis>
			<x> 0</x>
			<y>-1</y>
			<z> 0</z>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>StrutDown2Right</object-name>
		<property>gear/gear[2]/compression-norm[2]</property>
		<factor>60</factor>
		<center>
			<x-m> 1.3493</x-m>
			<y-m>-0.8284</y-m>
			<z-m>-0.7502</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>1</y>
			<z>0</z>
		</axis>
	</animation>
        
</PropertyList>
